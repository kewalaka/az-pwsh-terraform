name: GHCR Cleanup Action (Deploy)
description: Cleans up PR images and unreferenced SHA images during deployment

inputs:
  token:
    description: "GitHub token"
    required: true
  pr-number:
    description: "PR number to delete the associated image"
    required: true

runs:
  using: composite
  steps:
    - name: Cleanup PR image and unreferenced SHA images
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.token }}
        PR_NUMBER: ${{ inputs['pr-number'] }}
      run: |
        set -euo pipefail

        REPO_OWNER=${GITHUB_REPOSITORY%/*}
        REPO_NAME=${GITHUB_REPOSITORY##*/}
        PACKAGE="${REPO_NAME}"

        IS_ORG=$(gh api /users/$REPO_OWNER -q .type 2>/dev/null || echo User)
        if [[ "$IS_ORG" == "Organization" ]]; then
          BASE_URL="/orgs/$REPO_OWNER/packages/container"
        else
          BASE_URL="/user/packages/container"
        fi

        PACKAGE_URL="$BASE_URL/$PACKAGE"
        gh api "$PACKAGE_URL" >/dev/null 2>&1 || { echo "Package not found"; exit 0; }

        echo "Checking for packages to cleanup at: $PACKAGE_URL"
        VERSIONS_JSON=$(gh api --paginate "$PACKAGE_URL/versions" | jq -s 'add')

        delete() {
          gh api -X DELETE "$PACKAGE_URL/versions/$1" --silent || echo "Failed to delete $1"
          echo "Deleted version $1"
        }

        # Explicitly delete the PR image
        echo "Deleting explicit PR image with tag pr-${PR_NUMBER}"
        jq -r --arg pr "pr-${PR_NUMBER}" '
          .[] | select(.metadata.container.tags[]? == $pr) | .id' <<<"$VERSIONS_JSON" | while read -r id; do
            delete "$id"
        done

    - name: Cleanup unreferenced SHA images
      uses: ../ghcr-cleanup-unreferenced
      with:
        token: ${{ inputs.token }}
