name: GHCR Cleanup Action
description: Cleans up GitHub Container Registry images

inputs:
  mode:
    description: "Cleanup mode: pr (remove orphaned SHA tags) or specific (delete given SHA)"
    required: true
    default: pr
  specific-sha:
    description: "SHA to delete when mode is specific"
    required: false
  token:
    description: "GitHub token"
    required: true

runs:
  using: composite
  steps:
    - name: Cleanup GHCR images
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.token }}
        MODE: ${{ inputs.mode }}
        SPECIFIC_SHA: ${{ inputs['specific-sha'] }}
        INCLUDE_UNTAGGED: ${{ inputs['include-untagged'] }}
      run: |
        set -euo pipefail

        REPO_OWNER=${GITHUB_REPOSITORY%/*}
        REPO_NAME=${GITHUB_REPOSITORY##*/}
        PACKAGE="${REPO_NAME}"

        IS_ORG=$(gh api /users/$REPO_OWNER -q .type 2>/dev/null || echo User)
        if [[ "$IS_ORG" == "Organization" ]]; then
          BASE_URL="/orgs/$REPO_OWNER/packages/container"
        else
          BASE_URL="/user/packages/container"
        fi

        PACKAGE_URL="$BASE_URL/$PACKAGE"
        gh api "$PACKAGE_URL" >/dev/null 2>&1 || { echo "Package not found"; exit 0; }

        if [[ "$MODE" == "specific" && -z "${SPECIFIC_SHA:-}" ]]; then
          echo "::error::specific-sha input required when mode=specific"
          exit 1
        fi
        echo "Checking for packages to cleanup at: $PACKAGE_URL"

        VERSIONS_JSON=$(gh api --paginate "$PACKAGE_URL/versions" | jq -s 'add')

        delete() {
          gh api -X DELETE "$PACKAGE_URL/versions/$1" --silent || echo "Failed to delete $1"
          echo "Deleted version $1"
        }

        if [[ "$MODE" == "specific" ]]; then
          VERSION_ID=$(jq -r --arg sha "$SPECIFIC_SHA" \
            '.[] | select(.metadata.container.tags[]? | contains($sha)) | .id' <<<"$VERSIONS_JSON")
          [[ -n "$VERSION_ID" ]] && delete "$VERSION_ID"
        else
          # we need to delete all SHA tags that are not PR tags
          jq -r '
            .[] |
            select(any(.metadata.container.tags[]?; test("^[a-f0-9]{40}$"))) |
            select(all(.metadata.container.tags[]?; test("^pr-[0-9]+$") | not)) |
            .id' <<<"$VERSIONS_JSON" | while read -r id; do delete "$id"; done

          echo "Looking for orphaned SHA256 tags"
          
          # There isn't an obvious way to do this, so we use a heuristic (creation time within TOLERANCE seconds)
          TOLERANCE=10
          
          # Loop over each version from VERSIONS_JSON
          echo "$VERSIONS_JSON" | jq -c '.[]' | while read -r version; do
            version_id=$(echo "$version" | jq -r '.id')
            created_at=$(echo "$version" | jq -r '.created_at')
            epoch_created=$(date -d "$created_at" +%s)
            tags=$(echo "$version" | jq -r '.metadata.container.tags | join(" ")')
            
            # If this version already has a friendly PR tag, skip deleting it.
            if echo "$tags" | grep -q -E "pr-[0-9]+"; then
              echo "Skipping version $version_id: has friendly tag(s): $tags"
              continue
            fi

            # Check if any version in VERSIONS_JSON has a PR tag and nearly the same creation time.
            pr_nearby=$(echo "$VERSIONS_JSON" | jq -r --arg tolerance "$TOLERANCE" --arg created_at "$created_at" '
              .[] | select(.metadata.container.tags[]? | test("^pr-[0-9]+$"))
                  | .created_at' | 
              while read -r pr_created; do
                pr_epoch=$(date -d "$pr_created" +%s)
                diff=$(( epoch_created > pr_epoch ? epoch_created - pr_epoch : pr_epoch - epoch_created ))
                if [[ $diff -le $TOLERANCE ]]; then
                  echo "found"
                  break
                fi
              done | head -n1)
          
            if [[ "$pr_nearby" == "found" ]]; then
              echo "Skipping version $version_id: a nearby PR-tagged version exists (created at $created_at)"
            else
              echo "Deleting version $version_id (created at $created_at): no recent PR version detected"
              delete "$version_id"
            fi
          done

        fi
        echo "Cleanup complete."
        exit 0