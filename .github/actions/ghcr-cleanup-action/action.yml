name: GHCR Cleanup Action
description: Cleans up GitHub Container Registry images

inputs:
  mode:
    description: "Cleanup mode: pr (remove orphaned SHA tags) or specific (delete given SHA)"
    required: true
    default: pr
  specific-sha:
    description: "SHA to delete when mode is specific"
    required: false
  include-untagged:
    description: "Whether to delete untagged images"
    required: false
    default: 'true'
  token:
    description: "GitHub token"
    required: true

runs:
  using: composite
  steps:
    - name: Cleanup GHCR images
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.token }}
        MODE: ${{ inputs.mode }}
        SPECIFIC_SHA: ${{ inputs['specific-sha'] }}
        INCLUDE_UNTAGGED: ${{ inputs['include-untagged'] }}
      run: |
        set -euo pipefail

        REPO_OWNER=${GITHUB_REPOSITORY%/*}
        REPO_NAME=${GITHUB_REPOSITORY##*/}
        PACKAGE="${REPO_NAME}"

        IS_ORG=$(gh api /users/$REPO_OWNER -q .type 2>/dev/null || echo User)
        if [[ "$IS_ORG" == "Organization" ]]; then
          BASE_URL="/orgs/$REPO_OWNER/packages/container"
        else
          BASE_URL="/user/packages/container"
        fi

        PACKAGE_URL="$BASE_URL/$PACKAGE"
        gh api "$PACKAGE_URL" >/dev/null 2>&1 || { echo "Package not found"; exit 0; }

        if [[ "$MODE" == "specific" && -z "${SPECIFIC_SHA:-}" ]]; then
          echo "::error::specific-sha input required when mode=specific"
          exit 1
        fi
        echo "Checking for packages to cleanup at: $PACKAGE_URL"

        VERSIONS_JSON=$(gh api --paginate "$PACKAGE_URL/versions" | jq -s 'add')

        delete() {
          gh api -X DELETE "$PACKAGE_URL/versions/$1" --silent || echo "Failed to delete $1"
          echo "Deleted version $1"
        }

        if [[ "$MODE" == "specific" ]]; then
          VERSION_ID=$(jq -r --arg sha "$SPECIFIC_SHA" \
            '.[] | select(.metadata.container.tags[]? | contains($sha)) | .id' <<<"$VERSIONS_JSON")
          [[ -n "$VERSION_ID" ]] && delete "$VERSION_ID"
        else
          # we need to delete all SHA tags that are not PR tags
          jq -r '
            .[] |
            select(any(.metadata.container.tags[]?; test("^[a-f0-9]{40}$"))) |
            select(all(.metadata.container.tags[]?; test("^pr-[0-9]+$") | not)) |
            .id' <<<"$VERSIONS_JSON" | while read -r id; do delete "$id"; done

          if [[ "$INCLUDE_UNTAGGED" == "true" ]]; then
            jq -r '.[] | select(.metadata.container.tags|length==0) | .id' \
              <<<"$VERSIONS_JSON" | while read -r id; do delete "$id"; done
          fi
        fi