name: GHCR Cleanup Action (PR Build)
description: Cleans up orphaned SHA images during PR builds

inputs:
  token:
    description: "GitHub token"
    required: true

runs:
  using: composite
  steps:
    - name: Cleanup orphaned SHA images
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.token }}
      run: |
        set -euo pipefail

        REPO_OWNER=${GITHUB_REPOSITORY%/*}
        REPO_NAME=${GITHUB_REPOSITORY##*/}
        PACKAGE="${REPO_NAME}"

        IS_ORG=$(gh api /users/$REPO_OWNER -q .type 2>/dev/null || echo User)
        if [[ "$IS_ORG" == "Organization" ]]; then
          BASE_URL="/orgs/$REPO_OWNER/packages/container"
        else
          BASE_URL="/user/packages/container"
        fi

        PACKAGE_URL="$BASE_URL/$PACKAGE"
        gh api "$PACKAGE_URL" >/dev/null 2>&1 || { echo "Package not found"; exit 0; }

        echo "Checking for packages to cleanup at: $PACKAGE_URL"
        VERSIONS_JSON=$(gh api --paginate "$PACKAGE_URL/versions" | jq -s 'add')

        delete() {
          gh api -X DELETE "$PACKAGE_URL/versions/$1" --silent || echo "Failed to delete $1"
          echo "Deleted version $1"
        }

        # Cleanup orphaned SHA40 images
        echo "Deleting orphaned SHA40 images"
        jq -r '
          .[] |
          select(any(.metadata.container.tags[]?; test("^[a-f0-9]{40}$"))) |
          select(all(.metadata.container.tags[]?; test("^pr-[0-9]+$") | not)) |
          .id' <<<"$VERSIONS_JSON" | while read -r id; do
            delete "$id"
        done

        # Cleanup orphaned SHA256 images using creation time heuristic
        echo "Looking for orphaned SHA256 tags (tolerance = 10 seconds)"
        TOLERANCE=10
        echo "$VERSIONS_JSON" | jq -c '.[]' | while read -r version; do
          version_id=$(echo "$version" | jq -r '.id')
          created_at=$(echo "$version" | jq -r '.created_at')
          epoch_created=$(date -d "$created_at" +%s)
          tags=$(echo "$version" | jq -r '.metadata.container.tags | join(" ")')

          # Skip if this version already has a friendly PR tag.
          if echo "$tags" | grep -q -E "pr-[0-9]+"; then
            echo "Skipping version $version_id: has friendly tag(s): $tags"
            continue
          fi

          # Check for any version in VERSIONS_JSON with a PR tag created close to this version.
          pr_nearby=$(echo "$VERSIONS_JSON" | jq -r --arg tolerance "$TOLERANCE" --arg created_at "$created_at" '
            .[] | select(.metadata.container.tags[]? | test("^pr-[0-9]+$")) | .created_at' | 
            while read -r pr_created; do
              pr_epoch=$(date -d "$pr_created" +%s)
              diff=$(( epoch_created > pr_epoch ? epoch_created - pr_epoch : pr_epoch - epoch_created ))
              if [[ $diff -le $TOLERANCE ]]; then
                echo "found"
                break
              fi
            done | head -n1)

          if [[ "$pr_nearby" == "found" ]]; then
            echo "Skipping version $version_id: nearby PR tag exists (created at $created_at)"
          else
            echo "Deleting version $version_id (created at $created_at): no recent PR tag detected"
            delete "$version_id"
          fi
        done

        echo "Cleanup complete."
        exit 0