name: Docker PR Build and Scan

on:
  pull_request:
    branches:
      - main

permissions:
  contents: read
  pull-requests: write
  packages: write

jobs:
  build-and-scan:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push Docker image to GHCR
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: |
          ghcr.io/${{ github.repository }}/az-pwsh-terraform:${{ github.sha }}
          ghcr.io/${{ github.repository }}/az-pwsh-terraform:pr-${{ github.event.pull_request.number }}

    # - name: Scan Docker image with Trivy and generate summary
    #   uses: aquasecurity/trivy-action@0.30.0
    #   with:
    #     image-ref: 'ghcr.io/${{ github.repository }}/az-pwsh-terraform:${{ github.sha }}'
    #     format: 'table'
    #     output: 'trivy-results.txt'
    #     severity: 'CRITICAL,HIGH,MEDIUM'

    # - name: Post Trivy scan results to PR
    #   uses: actions/github-script@v6
    #   if: github.event_name == 'pull_request'
    #   with:
    #     github-token: ${{ secrets.GITHUB_TOKEN }}
    #     script: |
    #       const fs = require('fs');
    #       const fullResults = fs.readFileSync('trivy-results.txt', 'utf8');
          
    #       let summarySection = '';
    #       const summaryMatch = fullResults.match(/Report Summary\n\n(.*?)\nLegend:/s);
          
    #       if (summaryMatch && summaryMatch[1]) {
    #         summarySection = summaryMatch[1].trim();
    #       } else {
    #         summarySection = "No vulnerability summary found. Please check the full report in the Actions tab.";
    #       }
          
    #       const header = '## Trivy Security Scan Summary\n\n';
    #       const footer = `\n\n---\n\n*For detailed results, please [view the actions output](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${process.env.GITHUB_RUN_ID}).*`;
          
    #       github.rest.issues.createComment({
    #         issue_number: context.issue.number,
    #         owner: context.repo.owner,
    #         repo: context.repo.repo,
    #         body: header + '```\n' + summarySection + '\n```' + footer
    #       });

    # - name: Publish Trivy to action log
    #   run: |
    #     if [[ -s trivy-results.txt ]]; then
    #       {
    #         echo "### Trivy Scan Results"
    #         echo "<details><summary>Click to expand</summary>"
    #         echo ""
    #         echo '```terraform'
    #         cat trivy-results.txt
    #         echo '```'
    #         echo "</details>"
    #       } >> $GITHUB_STEP_SUMMARY
    #     fi

    - name: Clean up old SHA-tagged images
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        # Get repository name and owner from the full repository path
        REPO_OWNER=${GITHUB_REPOSITORY%/*}
        PACKAGE_NAME=${GITHUB_REPOSITORY##*/}
        echo "Repository owner: $REPO_OWNER"
        echo "Package name: $PACKAGE_NAME"
        
        # Check if repo owner is an organization
        IS_ORG=$(gh api -H "Accept: application/vnd.github+json" /users/$REPO_OWNER 2>/dev/null | jq -r '.type')
        echo "Owner type: $IS_ORG"
        
        if [[ "$IS_ORG" == "Organization" ]]; then
          echo "Using organization API endpoint"
          echo "Finding package ID..."
          PACKAGE_URL=$(gh api -H "Accept: application/vnd.github+json" "/orgs/$REPO_OWNER/packages/container" | \
            jq -r --arg name "$PACKAGE_NAME" '.[] | select(.name == $name) | .url')
        else
          echo "Using user API endpoint"
          echo "Finding package ID..."
          PACKAGE_URL=$(gh api -H "Accept: application/vnd.github+json" "/user/packages?package_type=container" | \
            jq -r --arg name "$PACKAGE_NAME" '.[] | select(.name == $name) | .url')
        fi
        
        if [[ -z "$PACKAGE_URL" ]]; then
          echo "Package not found. Exiting."
          exit 0
        fi
        
        echo "Package URL: $PACKAGE_URL"
        
        echo "Finding versions to delete..."
        VERSIONS_JSON=$(gh api -H "Accept: application/vnd.github+json" "$PACKAGE_URL/versions")
        
        VERSIONS_TO_DELETE=$(echo "$VERSIONS_JSON" | jq -r '.[] | 
          # Extract id and tags
          {id: .id, tags: .metadata.container.tags} |
          # Only select versions with SHA tags
          select(any(.tags[]; test("^[a-f0-9]{40}$"))) |
          # Exclude any version that has a PR tag
          select(all(.tags[]; test("^pr-[0-9]+$") | not)) |
          # Output just the ID
          .id')
        
        # Delete each version found
        if [[ -n "$VERSIONS_TO_DELETE" ]]; then
          echo "Deleting versions:"
          echo "$VERSIONS_TO_DELETE" | while read -r VERSION_ID; do
            echo "  - Deleting version $VERSION_ID"
            if [[ "$IS_ORG" == "Organization" ]]; then
              gh api --method DELETE \
                -H "Accept: application/vnd.github+json" \
                "/orgs/$REPO_OWNER/packages/container/$PACKAGE_NAME/versions/$VERSION_ID" || \
                echo "Failed to delete version $VERSION_ID"
            else
              gh api --method DELETE \
                -H "Accept: application/vnd.github+json" \
                "/user/packages/container/$PACKAGE_NAME/versions/$VERSION_ID" || \
                echo "Failed to delete version $VERSION_ID"
            fi
          done
        else
          echo "No versions to delete."
        fi